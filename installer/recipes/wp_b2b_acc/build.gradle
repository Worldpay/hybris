// Hybris b2b_acc_plus recipe extended with Worldpay addon
apply plugin: 'installer-platform-plugin'
apply plugin: 'installer-addon2-plugin'

def pl = platform {
    localProperties {
        property 'recaptcha.publickey', ''
        property 'recaptcha.privatekey', ''
        property 'googleApiKey', ''
        property 'website.powertools.http', 'http://powertools.local:9001/yb2bacceleratorstorefront'
        property 'website.powertools.https', 'https://powertools.local:9002/yb2bacceleratorstorefront'
        property 'testclasses.addonname', 'yb2bacceleratorstorefront'
        property 'ansi.colors', 'true'

        property 'worldpay.config.web.merchant.code.powertools', '<CHANGE_ME>'
        property 'worldpay.config.web.merchant.password.powertools', '<CHANGE_ME>'
        property 'worldpay.config.web.merchant.macSecret.powertools', '<CHANGE_ME>'
        property 'worldpay.config.web.googlePay.gatewayMerchantId.powertools', '<CHANGE_ME>'
        property 'worldpay.config.web.merchant.installationId.powertools', '<CHANGE_ME>'
        property 'worldpay.config.web.merchant.statementNarrative.powertools', '<CHANGE_ME>'
        property 'worldpay.config.asm.merchant.code.powertools', '<CHANGE_ME>'
        property 'worldpay.config.asm.merchant.password.powertools', '<CHANGE_ME>'
        property 'worldpay.config.asm.merchant.macSecret.powertools', '<CHANGE_ME>'
        property 'worldpay.config.asm.merchant.installationId.powertools', '<CHANGE_ME>'
        property 'worldpay.config.asm.merchant.statementNarrative.powertools', '<CHANGE_ME>'
        property 'worldpay.config.replenishment.merchant.code.powertools', '<CHANGE_ME>'
        property 'worldpay.config.replenishment.merchant.password.powertools', '<CHANGE_ME>'
        property 'worldpay.config.replenishment.merchant.macSecret.powertools', '<CHANGE_ME>'
        property 'worldpay.config.replenishment.merchant.installationId.powertools', '<CHANGE_ME>'
        property 'worldpay.config.replenishment.merchant.statementNarrative.powertools', '<CHANGE_ME>'
        property 'worldpay.config.3dsecureflex.jwt.iss.apparel_de', '<CHANGE_ME>'
        property 'worldpay.config.3dsecureflex.jwt.jwtmackey.powertools', '<CHANGE_ME>'
        property 'worldpay.config.3dsecureflex.jwt.orgunitid.powertools', '<CHANGE_ME>'
    }

    afterSetup {
        ensureAdminPasswordSet()
    }

    extensions {

        extName 'adaptivesearchsolr'
        extName 'adaptivesearchbackoffice'
        extName 'adaptivesearchsamplesaddon'
        extName 'adaptivesearchwebservices'
        extName 'b2bcommercebackoffice'
        extName 'solrfacetsearchbackoffice'

        extName 'yacceleratorbackoffice'
        extName 'yacceleratorinitialdata'
        extName 'yacceleratorfulfilmentprocess'
        extName 'ycommercewebservices'
        extName 'orderselfserviceaddon'

        extName 'powertoolsstore'
        extName 'solrserver'

        extName 'acceleratorwebservicesaddon'
        extName 'b2bacceleratoraddon'
        extName 'commerceorgsamplesaddon'
        extName 'b2bpunchoutaddon'
        extName 'savedorderformsocc'
        extName 'b2bocc'
        extName 'accountsummaryaddon'
        extName 'assistedservicestorefront'
        extName 'assistedservicewebservices'
        extName 'captchaaddon'

        extName 'customerticketingaddon'
        extName 'customersupportbackoffice'

        extName 'rulebuilderbackoffice'
        extName 'couponbackoffice'
        extName 'droolsruleengineservices'
        extName 'couponfacades'
        extName 'couponservices'
        extName 'promotionenginesamplesaddon'

        extName 'textfieldconfiguratortemplatebackoffice'
        extName 'textfieldconfiguratortemplateaddon'

        extName 'cmswebservices'
        extName 'smarteditwebservices'
        extName 'permissionswebservices'
        extName 'smarteditaddon'
        extName 'cmssmartedit'
        extName 'cmsbackoffice'
        extName 'previewwebservices'
        extName 'cmssmarteditwebservices'
        extName 'cmsoccaddon'

        extName 'previewpersonalizationweb'
        extName 'personalizationcmsweb'
        extName 'personalizationsmartedit'
        extName 'personalizationpromotionssmartedit'
        extName 'personalizationsampledataaddon'
        extName 'personalizationpromotionssampledataaddon'
        extName 'personalizationpromotions'
        extName 'personalizationpromotionsweb'
        extName 'personalizationservicesbackoffice'
        extName 'personalizationpromotionsbackoffice'
        extName 'personalizationcmsbackoffice'
        extName 'personalizationsearchbackoffice'
        extName 'personalizationsearchsmartedit'
        extName 'personalizationsearchweb'
        extName 'personalizationsearchsamplesaddon'

        extName 'consignmenttrackingaddon'
        extName 'consignmenttrackingmock'
        extName 'consignmenttrackingbackoffice'

        extName 'pcmbackofficesamplesaddon'

        extName 'configurablebundleaddon'

        extName 'consignmenttrackingocc'

        /* integration-apis */
        extName 'outboundservices'
        extName 'odata2webservices'

        extName 'kymaintegrationbackoffice'

        extName 'yb2bacceleratorstorefront'

        /* Worldpay extensions */
        extName 'worldpayaddonbackoffice'
        extName 'worldpayapi'
        extName 'worldpayb2baddon'
        extName 'worldpaynotifications'
        extName 'worldpaysampledataaddon'
        extName 'worldpayhac'
        extName 'worldpayfulfilment'
    }

    addons {
        forStoreFronts('yb2bacceleratorstorefront') {
            names('worldpayb2baddon', 'worldpaysampledataaddon', 'b2bacceleratoraddon', 'commerceorgaddon', 'commerceorgsamplesaddon', 'b2bpunchoutaddon',
                'accountsummaryaddon', 'assistedservicestorefront', 'captchaaddon', 'customerticketingaddon', 'promotionenginesamplesaddon',
                'textfieldconfiguratortemplateaddon', 'orderselfserviceaddon', 'smarteditaddon', 'adaptivesearchsamplesaddon',
                'consignmenttrackingaddon', 'configurablebundleaddon', 'pcmbackofficesamplesaddon', 'personalizationsearchsamplesaddon')
            template 'yacceleratorstorefront'
        }
    }
}

task createStoreFrontExt {
    doLast {
        def prePlatform = platformFactory.createPlatform()
        prePlatform.createConfigDirIfNotExist()
        prePlatform.resetConfig()

        prePlatform.createExtension {
            templateName 'yacceleratorstorefront'
            extensionName 'yb2bacceleratorstorefront'
            packageName 'de.hybris.platform.yb2bacceleratorstorefront'
        }
    }
}

task setup(dependsOn: createStoreFrontExt) {
    doLast {
        pl.setup()
    }
}

task buildSystem(dependsOn: setup) {
    doLast {
        pl.build()
    }
}

task initialize(dependsOn: buildSystem) {
    doLast {
        pl.initialize()
    }
}

task start {
    doLast {
        pl.start()
    }
}

task startInBackground {
    doLast {
        pl.startInBackground()
    }
}

task stopInBackground {
    doLast {
        pl.stopInBackground()
    }
}
